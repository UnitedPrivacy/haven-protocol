--- monero/src/crypto/chacha.h	2019-06-20 21:03:18.722816669 +0100
+++ haven/src/crypto/chacha.h	2019-05-30 17:58:17.109592393 +0100
@@ -38,10 +38,14 @@
 
 #if defined(__cplusplus)
 #include <memory.h>
+#include "wipeable_string.h"
 
 #include "memwipe.h"
 #include "mlocker.h"
 #include "hash.h"
+#include "cn_slow_hash.hpp"
+
+#define HAVEN_CHACHA_ROUNDS 8
 
 namespace crypto {
   extern "C" {
@@ -72,20 +72,20 @@
 
   inline void generate_chacha_key(const void *data, size_t size, chacha_key& key, uint64_t kdf_rounds) {
     static_assert(sizeof(chacha_key) <= sizeof(hash), "Size of hash must be at least that of chacha_key");
-    epee::mlocked<tools::scrubbed_arr<char, HASH_SIZE>> pwd_hash;
-    crypto::cn_slow_hash(data, size, pwd_hash.data(), 0/*variant*/, 0/*prehashed*/, 0/*height*/);
-    for (uint64_t n = 1; n < kdf_rounds; ++n)
-      crypto::cn_slow_hash(pwd_hash.data(), pwd_hash.size(), pwd_hash.data(), 0/*variant*/, 0/*prehashed*/, 0/*height*/);
-    memcpy(&unwrap(unwrap(key)), pwd_hash.data(), sizeof(key));
+    uint8_t pwd_hash[HASH_SIZE];
+    cn_pow_hash_v1 kdf_hash;
+    kdf_hash.hash(data, size, pwd_hash);
+    memcpy(&unwrap(unwrap(key)), pwd_hash, sizeof(key));
+    memset(pwd_hash, 0, sizeof(pwd_hash));
   }
 
   inline void generate_chacha_key_prehashed(const void *data, size_t size, chacha_key& key, uint64_t kdf_rounds) {
     static_assert(sizeof(chacha_key) <= sizeof(hash), "Size of hash must be at least that of chacha_key");
-    epee::mlocked<tools::scrubbed_arr<char, HASH_SIZE>> pwd_hash;
-    crypto::cn_slow_hash(data, size, pwd_hash.data(), 0/*variant*/, 1/*prehashed*/, 0/*height*/);
-    for (uint64_t n = 1; n < kdf_rounds; ++n)
-      crypto::cn_slow_hash(pwd_hash.data(), pwd_hash.size(), pwd_hash.data(), 0/*variant*/, 0/*prehashed*/, 0/*height*/);
-    memcpy(&unwrap(unwrap(key)), pwd_hash.data(), sizeof(key));
+    uint8_t pwd_hash[HASH_SIZE];
+    cn_pow_hash_v1 kdf_hash;
+    kdf_hash.hash(data, size, pwd_hash);
+    memcpy(&unwrap(unwrap(key)), pwd_hash, sizeof(key));
+    memset(pwd_hash, 0, sizeof(pwd_hash));
   }
 
   inline void generate_chacha_key(std::string password, chacha_key& key, uint64_t kdf_rounds) {
