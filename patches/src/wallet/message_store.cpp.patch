--- monero/src/wallet/message_store.cpp	2019-06-20 21:03:18.794816074 +0100
+++ haven/src/wallet/message_store.cpp	2019-06-05 12:45:14.769728847 +0100
@@ -705,7 +705,7 @@
   std::string buf = oss.str();
 
   crypto::chacha_key key;
-  crypto::generate_chacha_key(&state.view_secret_key, sizeof(crypto::secret_key), key, 1);
+  crypto::generate_chacha_key(&state.view_secret_key, sizeof(crypto::secret_key), key, HAVEN_CHACHA_ROUNDS);
 
   file_data write_file_data = boost::value_initialized<file_data>();
   write_file_data.magic_string = "MMS";
@@ -755,7 +755,7 @@
   }
 
   crypto::chacha_key key;
-  crypto::generate_chacha_key(&state.view_secret_key, sizeof(crypto::secret_key), key, 1);
+  crypto::generate_chacha_key(&state.view_secret_key, sizeof(crypto::secret_key), key, HAVEN_CHACHA_ROUNDS);
   std::string decrypted_data;
   decrypted_data.resize(read_file_data.encrypted_data.size());
   crypto::chacha20(read_file_data.encrypted_data.data(), read_file_data.encrypted_data.size(), key, read_file_data.iv, &decrypted_data[0]);
@@ -1181,20 +1181,20 @@
   THROW_WALLET_EXCEPTION_IF(!success, tools::error::wallet_internal_error, "Failed to generate key derivation for message encryption");
 
   crypto::chacha_key chacha_key;
-  crypto::generate_chacha_key(&derivation, sizeof(derivation), chacha_key, 1);
+  crypto::generate_chacha_key(&derivation, sizeof(derivation), chacha_key, HAVEN_CHACHA_ROUNDS);
   iv = crypto::rand<crypto::chacha_iv>();
   ciphertext.resize(plaintext.size());
   crypto::chacha20(plaintext.data(), plaintext.size(), chacha_key, iv, &ciphertext[0]);
 }
 
 void message_store::decrypt(const std::string &ciphertext, const crypto::public_key &encryption_public_key, const crypto::chacha_iv &iv,
                             const crypto::secret_key &view_secret_key, std::string &plaintext)
 {
   crypto::key_derivation derivation;
   bool success = crypto::generate_key_derivation(encryption_public_key, view_secret_key, derivation);
   THROW_WALLET_EXCEPTION_IF(!success, tools::error::wallet_internal_error, "Failed to generate key derivation for message decryption");
   crypto::chacha_key chacha_key;
-  crypto::generate_chacha_key(&derivation, sizeof(derivation), chacha_key, 1);
+  crypto::generate_chacha_key(&derivation, sizeof(derivation), chacha_key, HAVEN_CHACHA_ROUNDS);
   plaintext.resize(ciphertext.size());
   crypto::chacha20(ciphertext.data(), ciphertext.size(), chacha_key, iv, &plaintext[0]);
 }
