--- monero/src/crypto/chacha.h	2019-06-20 21:03:18.722816669 +0100
+++ haven/src/crypto/chacha.h	2019-05-30 17:58:17.109592393 +0100
@@ -35,13 +35,17 @@
 
 #define CHACHA_KEY_SIZE 32
 #define CHACHA_IV_SIZE 8
+#define CHACHA8_KEY_SIZE 32
+#define CHACHA8_IV_SIZE 8
 
 #if defined(__cplusplus)
 #include <memory.h>
+#include "wipeable_string.h"
 
 #include "memwipe.h"
-#include "mlocker.h"
 #include "hash.h"
+#include "cn_slow_hash.hpp"
+
 
 namespace crypto {
   extern "C" {
@@ -51,45 +55,47 @@
 #if defined(__cplusplus)
   }
 
-  using chacha_key = epee::mlocked<tools::scrubbed_arr<uint8_t, CHACHA_KEY_SIZE>>;
+  // using chacha8_key = tools::scrubbed_arr<uint8_t, CHACHA8_KEY_SIZE>;
 
 #pragma pack(push, 1)
+  struct chacha8_key {
+    uint8_t data[CHACHA8_KEY_SIZE];
+
+    ~chacha8_key()
+    {
+      memset(data, 0, sizeof(data));
+    }
+  };
   // MS VC 2012 doesn't interpret `class chacha_iv` as POD in spite of [9.0.10], so it is a struct
+  struct chacha8_iv {
+    uint8_t data[CHACHA8_IV_SIZE];
+  };
   struct chacha_iv {
     uint8_t data[CHACHA_IV_SIZE];
   };
 #pragma pack(pop)
 
-  static_assert(sizeof(chacha_key) == CHACHA_KEY_SIZE && sizeof(chacha_iv) == CHACHA_IV_SIZE, "Invalid structure size");
-
-  inline void chacha8(const void* data, std::size_t length, const chacha_key& key, const chacha_iv& iv, char* cipher) {
-    chacha8(data, length, key.data(), reinterpret_cast<const uint8_t*>(&iv), cipher);
-  }
+  static_assert(sizeof(chacha8_key) == CHACHA8_KEY_SIZE && sizeof(chacha8_iv) == CHACHA8_IV_SIZE, "Invalid structure size");
 
-  inline void chacha20(const void* data, std::size_t length, const chacha_key& key, const chacha_iv& iv, char* cipher) {
-    chacha20(data, length, key.data(), reinterpret_cast<const uint8_t*>(&iv), cipher);
+  inline void chacha8(const void* data, std::size_t length, const chacha8_key& key, const chacha8_iv& iv, char* cipher) {
+    chacha8(data, length, reinterpret_cast<const uint8_t*>(&key), reinterpret_cast<const uint8_t*>(&iv), cipher);
   }
 
-  inline void generate_chacha_key(const void *data, size_t size, chacha_key& key, uint64_t kdf_rounds) {
-    static_assert(sizeof(chacha_key) <= sizeof(hash), "Size of hash must be at least that of chacha_key");
-    epee::mlocked<tools::scrubbed_arr<char, HASH_SIZE>> pwd_hash;
-    crypto::cn_slow_hash(data, size, pwd_hash.data(), 0/*variant*/, 0/*prehashed*/, 0/*height*/);
-    for (uint64_t n = 1; n < kdf_rounds; ++n)
-      crypto::cn_slow_hash(pwd_hash.data(), pwd_hash.size(), pwd_hash.data(), 0/*variant*/, 0/*prehashed*/, 0/*height*/);
-    memcpy(&unwrap(unwrap(key)), pwd_hash.data(), sizeof(key));
+  inline void chacha20(const void* data, std::size_t length, const chacha8_key& key, const chacha8_iv& iv, char* cipher) {
+    chacha20(data, length, reinterpret_cast<const uint8_t*>(&key), reinterpret_cast<const uint8_t*>(&iv), cipher);
   }
 
-  inline void generate_chacha_key_prehashed(const void *data, size_t size, chacha_key& key, uint64_t kdf_rounds) {
-    static_assert(sizeof(chacha_key) <= sizeof(hash), "Size of hash must be at least that of chacha_key");
-    epee::mlocked<tools::scrubbed_arr<char, HASH_SIZE>> pwd_hash;
-    crypto::cn_slow_hash(data, size, pwd_hash.data(), 0/*variant*/, 1/*prehashed*/, 0/*height*/);
-    for (uint64_t n = 1; n < kdf_rounds; ++n)
-      crypto::cn_slow_hash(pwd_hash.data(), pwd_hash.size(), pwd_hash.data(), 0/*variant*/, 0/*prehashed*/, 0/*height*/);
-    memcpy(&unwrap(unwrap(key)), pwd_hash.data(), sizeof(key));
+  inline void generate_chacha8_key(const void *data, size_t size, chacha8_key& key) {
+    static_assert(sizeof(chacha8_key) <= sizeof(hash), "Size of hash must be at least that of chacha_key");
+    uint8_t pwd_hash[HASH_SIZE];
+    cn_pow_hash_v1 kdf_hash;
+    kdf_hash.hash(data, size, pwd_hash);
+    memcpy(&key, pwd_hash, sizeof(key));
+    memset(pwd_hash, 0, sizeof(pwd_hash));
   }
 
-  inline void generate_chacha_key(std::string password, chacha_key& key, uint64_t kdf_rounds) {
-    return generate_chacha_key(password.data(), password.size(), key, kdf_rounds);
+  inline void generate_chacha8_key(epee::wipeable_string password, chacha8_key& key) {
+    return generate_chacha8_key(password.data(), password.size(), key);
   }
 }
 
