--- monero/src/cryptonote_basic/difficulty.cpp	2019-06-20 21:03:18.730816602 +0100
+++ haven/src/cryptonote_basic/difficulty.cpp	2019-05-30 17:58:17.121592273 +0100
@@ -33,8 +35,9 @@
 #include <cstddef>
 #include <cstdint>
 #include <vector>
+#include <boost/math/special_functions/round.hpp>
 
-#include "int-util.h"
+#include "common/int-util.h"
 #include "crypto/hash.h"
 #include "cryptonote_config.h"
 #include "difficulty.h"
@@ -200,44 +200,133 @@
       return check_hash_128(hash, difficulty);
   }
 
-  difficulty_type next_difficulty(std::vector<uint64_t> timestamps, std::vector<difficulty_type> cumulative_difficulties, size_t target_seconds) {
-    //cutoff DIFFICULTY_LAG
-    if(timestamps.size() > DIFFICULTY_WINDOW)
-    {
-      timestamps.resize(DIFFICULTY_WINDOW);
-      cumulative_difficulties.resize(DIFFICULTY_WINDOW);
-    }
-
-
-    size_t length = timestamps.size();
-    assert(length == cumulative_difficulties.size());
-    if (length <= 1) {
-      return 1;
-    }
-    static_assert(DIFFICULTY_WINDOW >= 2, "Window is too small");
-    assert(length <= DIFFICULTY_WINDOW);
-    sort(timestamps.begin(), timestamps.end());
-    size_t cut_begin, cut_end;
-    static_assert(2 * DIFFICULTY_CUT <= DIFFICULTY_WINDOW - 2, "Cut length is too large");
-    if (length <= DIFFICULTY_WINDOW - 2 * DIFFICULTY_CUT) {
-      cut_begin = 0;
-      cut_end = length;
-    } else {
-      cut_begin = (length - (DIFFICULTY_WINDOW - 2 * DIFFICULTY_CUT) + 1) / 2;
-      cut_end = cut_begin + (DIFFICULTY_WINDOW - 2 * DIFFICULTY_CUT);
-    }
-    assert(/*cut_begin >= 0 &&*/ cut_begin + 2 <= cut_end && cut_end <= length);
-    uint64_t time_span = timestamps[cut_end - 1] - timestamps[cut_begin];
-    if (time_span == 0) {
-      time_span = 1;
-    }
-    difficulty_type total_work = cumulative_difficulties[cut_end - 1] - cumulative_difficulties[cut_begin];
-    assert(total_work > 0);
-    boost::multiprecision::uint256_t res =  (boost::multiprecision::uint256_t(total_work) * target_seconds + time_span - 1) / time_span;
-    if(res > max128bit)
-      return 0; // to behave like previous implementation, may be better return max128bit?
-    return res.convert_to<difficulty_type>();
-  }
+
+  /*
+ # Tom Harold (Degnr8) WT
+ # Modified by Zawy to be a weighted-Weighted Harmonic Mean (WWHM)
+ * Further credit to thaerkh https://github.com/thaerkh who implemented this DAA into Masari and as a pull request to Monero.
+ # No limits in rise or fall rate should be employed.
+ # MTP should not be used.
+ k = (N+1)/2  * T
+ # original algorithm
+ d=0, t=0, j=0
+ for i = height - N+1 to height  # (N most recent blocks)
+     # TS = timestamp
+     solvetime = TS[i] - TS[i-1]
+     solvetime = 10*T if solvetime > 10*T
+     solvetime = -9*T if solvetime < -9*T
+     j++
+     t +=  solvetime * j
+     d +=D[i] # sum the difficulties
+ next i
+ t=T*N/2 if t < T*N/2  # in case of startup weirdness, keep t reasonable
+ next_D = d * k / t
+ */
+
+  difficulty_type next_difficulty(std::vector<std::uint64_t> timestamps, std::vector<difficulty_type> cumulative_difficulties, size_t target_seconds) {
+    if (timestamps.size() > DIFFICULTY_BLOCKS_COUNT)
+    {
+      timestamps.resize(DIFFICULTY_BLOCKS_COUNT);
+      cumulative_difficulties.resize(DIFFICULTY_BLOCKS_COUNT);
+    }
+
+    size_t length = timestamps.size();
+    assert(length == cumulative_difficulties.size());
+    if (length <= 1) {
+      return 1;
+    }
+
+    uint64_t weighted_timespans = 0;
+    uint64_t target;
+
+    for (size_t i = 1; i < length; i++) {
+      uint64_t timespan;
+      if (timestamps[i - 1] >= timestamps[i]) {
+        timespan = 1;
+      } else {
+        timespan = timestamps[i] - timestamps[i - 1];
+      }
+      if (timespan > 10 * target_seconds) {
+        timespan = 10 * target_seconds;
+      }
+      weighted_timespans += i * timespan;
+    }
+    target = ((length + 1) / 2) * target_seconds;
+
+
+    uint64_t minimum_timespan = target_seconds * length / 2;
+    if (weighted_timespans < minimum_timespan) {
+      weighted_timespans = minimum_timespan;
+    }
+
+    difficulty_type total_work = cumulative_difficulties.back() - cumulative_difficulties.front();
+    assert(total_work > 0);
+
+    uint64_t low, high;
+    mul(total_work.convert_to<uint64_t>(), target, low, high);
+    if (high != 0) {
+      return 0;
+    }
+    return low / weighted_timespans;
+  }
+
+  difficulty_type next_difficulty_v2(std::vector<std::uint64_t> timestamps, std::vector<difficulty_type> cumulative_difficulties, size_t target_seconds) {
+
+		// LWMA difficulty algorithm
+		// Copyright (c) 2017-2018 Zawy
+		// MIT license http://www.opensource.org/licenses/mit-license.php.
+		// This is an improved version of Tom Harding's (Deger8) "WT-144"
+		// Karbowanec, Masari, Bitcoin Gold, and Bitcoin Cash have contributed.
+		// See https://github.com/zawy12/difficulty-algorithms/issues/3 for other algos.
+		// Do not use "if solvetime < 0 then solvetime = 1" which allows a catastrophic exploit.
+		// T= target_solvetime;
+		// N=45, 55, 70, 90, 120 for T=600, 240, 120, 90, and 60
+
+		const int64_t T = static_cast<int64_t>(target_seconds);
+		size_t N = DIFFICULTY_WINDOW_V2;
+
+		if (timestamps.size() > N) {
+			timestamps.resize(N + 1);
+			cumulative_difficulties.resize(N + 1);
+		}
+		size_t n = timestamps.size();
+		assert(n == cumulative_difficulties.size());
+		assert(n <= DIFFICULTY_WINDOW_V2);
+    // If new coin, just "give away" first 5 blocks at low difficulty
+    if ( n < 6 ) { return  1; }
+    // If height "n" is from 6 to N, then reset N to n-1.
+    else if (n < N+1) { N=n-1; }
+
+		// To get an average solvetime to within +/- ~0.1%, use an adjustment factor.
+    // adjust=0.99 for 90 < N < 130
+		const double adjust = 0.998;
+		// The divisor k normalizes LWMA.
+		const double k = N * (N + 1) / 2;
+
+		double LWMA(0), sum_inverse_D(0), harmonic_mean_D(0), nextDifficulty(0);
+		int64_t solveTime(0);
+		uint64_t difficulty(0), next_difficulty(0);
+
+		// Loop through N most recent blocks.
+		for (size_t i = 1; i <= N; i++) {
+			solveTime = static_cast<int64_t>(timestamps[i]) - static_cast<int64_t>(timestamps[i - 1]);
+			solveTime = std::min<int64_t>((T * 7), std::max<int64_t>(solveTime, (-7 * T)));
+			difficulty = cumulative_difficulties[i] - cumulative_difficulties[i - 1];
+			LWMA += (int64_t)(solveTime * i) / k;
+			sum_inverse_D += 1 / static_cast<double>(difficulty);
+		}
+
+		// Keep LWMA sane in case something unforeseen occurs.
+		if (static_cast<int64_t>(boost::math::round(LWMA)) < T / 20)
+			LWMA = static_cast<double>(T / 20);
+
+		harmonic_mean_D = N / sum_inverse_D * adjust;
+		nextDifficulty = harmonic_mean_D * T / LWMA;
+		next_difficulty = static_cast<uint64_t>(nextDifficulty);
+
+    return next_difficulty;
+  }
+  
 
   std::string hex(difficulty_type v)
   {
