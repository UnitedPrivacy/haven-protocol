--- monero/src/cryptonote_basic/account.h	2019-06-20 21:03:18.730816602 +0100
+++ haven/src/cryptonote_basic/account.h	2019-05-30 17:58:17.121592273 +0100
@@ -44,29 +44,29 @@
     crypto::secret_key   m_view_secret_key;
     std::vector<crypto::secret_key> m_multisig_keys;
     hw::device *m_device = &hw::get_device("default");
-    crypto::chacha_iv m_encryption_iv;
+    crypto::chacha8_iv m_encryption_iv;
 
     BEGIN_KV_SERIALIZE_MAP()
       KV_SERIALIZE(m_account_address)
       KV_SERIALIZE_VAL_POD_AS_BLOB_FORCE(m_spend_secret_key)
       KV_SERIALIZE_VAL_POD_AS_BLOB_FORCE(m_view_secret_key)
       KV_SERIALIZE_CONTAINER_POD_AS_BLOB(m_multisig_keys)
-      const crypto::chacha_iv default_iv{{0, 0, 0, 0, 0, 0, 0, 0}};
+      const crypto::chacha8_iv default_iv{{0, 0, 0, 0, 0, 0, 0, 0}};
       KV_SERIALIZE_VAL_POD_AS_BLOB_OPT(m_encryption_iv, default_iv)
     END_KV_SERIALIZE_MAP()
 
     account_keys& operator=(account_keys const&) = default;
 
-    void encrypt(const crypto::chacha_key &key);
-    void decrypt(const crypto::chacha_key &key);
-    void encrypt_viewkey(const crypto::chacha_key &key);
-    void decrypt_viewkey(const crypto::chacha_key &key);
+    void encrypt(const crypto::chacha8_key &key);
+    void decrypt(const crypto::chacha8_key &key);
+    void encrypt_viewkey(const crypto::chacha8_key &key);
+    void decrypt_viewkey(const crypto::chacha8_key &key);
 
     hw::device& get_device()  const ;
     void set_device( hw::device &hwdev) ;
 
   private:
-    void xor_with_key_stream(const crypto::chacha_key &key);
+    void xor_with_key_stream(const crypto::chacha8_key &key);
   };
 
   /************************************************************************/
@@ -100,10 +100,10 @@
     void forget_spend_key();
     const std::vector<crypto::secret_key> &get_multisig_keys() const { return m_keys.m_multisig_keys; }
 
-    void encrypt_keys(const crypto::chacha_key &key) { m_keys.encrypt(key); }
-    void decrypt_keys(const crypto::chacha_key &key) { m_keys.decrypt(key); }
-    void encrypt_viewkey(const crypto::chacha_key &key) { m_keys.encrypt_viewkey(key); }
-    void decrypt_viewkey(const crypto::chacha_key &key) { m_keys.decrypt_viewkey(key); }
+    void encrypt_keys(const crypto::chacha8_key &key) { m_keys.encrypt(key); }
+    void decrypt_keys(const crypto::chacha8_key &key) { m_keys.decrypt(key); }
+    void encrypt_viewkey(const crypto::chacha8_key &key) { m_keys.encrypt_viewkey(key); }
+    void decrypt_viewkey(const crypto::chacha8_key &key) { m_keys.decrypt_viewkey(key); }
 
     template <class t_archive>
     inline void serialize(t_archive &a, const unsigned int /*ver*/)
