version: 2.1

tagged-build: &tagged-build
  filters:
    tags:
      only: /.*/
    branches:
      ignore: /.*/

jobs:
  build:
    docker:
      - image: ubuntu:16.04
    environment:
      CMAKE_VERSION: '3.14.0'
      CMAKE_VERSION_DOT: 'v3.14'
      CMAKE_HASH: 'aa76ba67b3c2af1946701f847073f4652af5cbd9f141f221c97af99127e75502'
      BOOST_VERSION: '1_69_0'
      BOOST_VERSION_DOT: '1.69.0'
      BOOST_HASH: '8f32d4617390d1c2d16f26a27ab60d97807b35440d45891fa340fc2648b04406'
      OPENSSL_VERSION: '1.1.1b'
      OPENSSL_HASH: '5c557b023230413dfb0756f3137a13e6d726838ccd1430888ad15bfb2b43ea4b'
      ZMQ_VERSION: 'v4.3.1'
      ZMQ_HASH: '2cb1240db64ce1ea299e00474c646a2453a8435b'
      CPPZMQ_VERSION: 'v4.3.0'
      CPPZMQ_HASH: '213da0b04ae3b4d846c9abc46bab87f86bfb9cf4'
      READLINE_VERSION: '8.0'
      READLINE_HASH: 'e339f51971478d369f8a053a330a190781acb9864cf4c541060f12078948e461'
      SODIUM_VERSION: '1.0.17'
      SODIUM_HASH: 'b732443c442239c2e0184820e9b23cca0de0828c'
      UDEV_VERSION: 'v3.2.7'
      UDEV_HASH: '4758e346a14126fc3a964de5831e411c27ebe487'
      USB_VERSION: 'v1.0.22'
      USB_HASH: '0034b2afdcdb1614e78edaa2a9e22d5936aeae5d'
      HIDAPI_VERSION: 'hidapi-0.8.0-rc1'
      HIDAPI_HASH: '40cf516139b5b61e30d9403a48db23d8f915f52c'
      PROTOBUF_VERSION: 'v3.7.0'
      PROTOBUF_HASH: '582743bf40c5d3639a70f98f183914a2c0cd0680'
      CFLAGS: '-fPIC'
      CXXFLAGS: '-fPIC'
      MONERO_BRANCH: 'release-v0.14'

    steps:
      - checkout

      - run:
          name: Install Build Deps
          command: |
            apt-get update
            apt-get --no-install-recommends --yes install ca-certificates cmake g++ make pkg-config graphviz doxygen git curl libtool-bin autoconf automake bzip2 xsltproc gperf unzip
      - run:
          name: Build and Install CMake
          command: |
            cd /usr/local
            curl -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz
            echo "${CMAKE_HASH}  cmake-${CMAKE_VERSION}.tar.gz" | sha256sum -c
            tar -xzf cmake-${CMAKE_VERSION}.tar.gz
            cd cmake-${CMAKE_VERSION}
            ./configure
            make
            make install
      - run:
          name: Build and Install Boost
          command: |
            cd /usr/local
            curl -s -L -o  boost_${BOOST_VERSION}.tar.bz2 https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2
            echo "${BOOST_HASH} boost_${BOOST_VERSION}.tar.bz2" | sha256sum -c
            tar -xvf boost_${BOOST_VERSION}.tar.bz2
            cd boost_${BOOST_VERSION}
            ./bootstrap.sh
            ./b2 --build-type=minimal link=static runtime-link=static --with-chrono --with-date_time --with-filesystem --with-program_options --with-regex --with-serialization --with-system --with-thread --with-locale threading=multi threadapi=pthread cflags="$CFLAGS" cxxflags="$CXXFLAGS" stage
      - run:
          name: Build and Install OpenSSL
          command: |
            cd /usr/local
            curl -s -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
            echo "${OPENSSL_HASH} openssl-${OPENSSL_VERSION}.tar.gz" | sha256sum -c
            tar -xzf openssl-${OPENSSL_VERSION}.tar.gz
            cd openssl-${OPENSSL_VERSION}
            ./Configure linux-x86_64 no-shared --static "$CFLAGS"
            make build_generated
            make libcrypto.a
            make install
      - run:
          name: Build and Install ZMQ
          command: |
            cd /usr/local
            git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION}
            cd libzmq
            test `git rev-parse HEAD` = ${ZMQ_HASH} || exit 1
            ./autogen.sh
            ./configure --enable-static --disable-shared
            make
            make install
            ldconfig
      - run:
          name: Install CPP ZMP Header
          command: |
            cd /usr/local
            git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION}
            cd cppzmq
            test `git rev-parse HEAD` = ${CPPZMQ_HASH} || exit 1
            mv *.hpp /usr/local/include
      - run:
          name: Build and Install Readline
          command: |
            cd /usr/local
            curl -s -O https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz
            echo "${READLINE_HASH} readline-${READLINE_VERSION}.tar.gz" | sha256sum -c
            tar -xzf readline-${READLINE_VERSION}.tar.gz
            cd readline-${READLINE_VERSION}
            ./configure
            make
            make install
      - run:
          name: Build and Install Sodium
          command: |
            cd /usr/local
            git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION}
            cd libsodium
            test `git rev-parse HEAD` = ${SODIUM_HASH} || exit 1
            ./autogen.sh
            ./configure
            make
            make check
            make install
      - run:
          name: Build and Install udev
          command: |
            cd /usr/local
            git clone https://github.com/gentoo/eudev -b ${UDEV_VERSION}
            cd eudev
            test `git rev-parse HEAD` = ${UDEV_HASH} || exit 1
            ./autogen.sh
            ./configure --disable-gudev --disable-introspection --disable-hwdb --disable-manpages --disable-shared
            make
            make install
      - run:
          name: Build and Install libusb
          command: |
            cd /usr/local
            git clone https://github.com/libusb/libusb.git -b ${USB_VERSION}
            cd libusb
            test `git rev-parse HEAD` = ${USB_HASH} || exit 1
            ./autogen.sh
            ./configure --disable-shared
            make
            make install
      - run:
          name: Build and Install hidapi
          command: |
            cd /usr/local
            git clone https://github.com/signal11/hidapi -b ${HIDAPI_VERSION}
            cd hidapi
            test `git rev-parse HEAD` = ${HIDAPI_HASH} || exit 1
            ./bootstrap
            ./configure --enable-static --disable-shared
            make
            make install
      - run:
          name: Build and Install protobuf
          command: |
            cd /usr/local
            git clone https://github.com/protocolbuffers/protobuf -b ${PROTOBUF_VERSION}
            cd protobuf
            test `git rev-parse HEAD` = ${PROTOBUF_HASH} || exit 1
            git submodule update --init --recursive
            ./autogen.sh
            ./configure --enable-static --disable-shared
            make
            make install
            ldconfig
      - run:
          name: Clone Monero repository
          command: |
            git clone -b $MONERO_BRANCH --recursive https://github.com/monero-project/monero
            pushd monero > /dev/null 2>&1
            git branch --set-upstream-to=origin/$MONERO_BRANCH $MONERO_BRANCH
            popd > /dev/null 2>&1
      - run:
          name: Apply Haven patches on Monero basecode
          command: |
            pushd patches > /dev/null 2>&1
            find * -type f | while read line ; do
                echo -n -e "\t"
                if [[ $line =~ ".git/" ]]; then
                    continue
                elif [[ $line =~ "^README.md$" ]]; then
                    continue
                fi
                if [[ ${line: -6} == ".patch" ]]; then
                    patchfile=$line
                    filename=${patchfile//\.patch/}
                    dstfilename="$PWD/../monero/$filename"
                    #echo "Applying patch file $patchfile for target $dstfilename ...";
                    patch -p0 $dstfilename < $patchfile
                else
                    dstfilename="../monero/$line"
                foldername=${line%/*}
                    echo "Copying file $line to $dstfilename ...";
                if [[ ! -d "../monero/$foldername" ]]; then
                    mkdir -p "../monero/$foldername"
                fi
                    cp $line $dstfilename
                fi
            done
            popd > /dev/null 2>&1
            
            HAVENVER=`git rev-parse --short HEAD`
            sed -i -e "s/@HAVENTAG@/$HAVENVER/g" monero/src/version.cpp.in
      - run:
          name: Build and Package Haven
          command: |
            export OPENSSL_ROOT_DIR=/usr/local/openssl-${OPENSSL_VERSION}
            export BOOST_ROOT=/usr/local/boost_${BOOST_VERSION}
            export USE_SINGLE_BUILDDIR=1
            pushd monero > /dev/null 2>&1
            make release-static
            tar -czvf haven-linux-x64-$(git describe --tags)-cli.tar.gz build/release/bin
            cp haven-linux-x64-$(git describe --tags)-cli.tar.gz build/release/bin
      - store_artifacts:
         path: build/release/bin/


workflows:
  version: 2
  build_cli_from_branch:
    jobs:
      - build
  build_cli_from_tag:
    jobs:
      - build: *tagged-build